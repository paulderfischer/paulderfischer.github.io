{"version":3,"sources":["Section.js","App.js","serviceWorker.js","index.js"],"names":["Section","headline","text","icon","className","App","useState","faUniversity","faTrain","faToolbox","sections","faHashtag","href","target","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAaeA,G,YARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,KAAnB,OACd,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAAiBD,KAAMA,IACvB,4BAAKF,GACL,2BAAIC,MC8BOG,EAhCH,WAAO,IAAD,EAEgBC,mBAAS,CACvC,CAAEL,SAAU,aAAcC,KAAM,mGAAqGC,KAAMI,KAC3I,CAAEN,SAAU,OAAQC,KAAM,MAAOC,KAAMK,KACvC,CAAEP,SAAU,UAAWC,KAAM,0LAA2LC,KAAMM,OALhN,mBAETC,EAFS,UAOhB,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,UACb,8CAEF,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAiBD,KAAMQ,MACvB,qCACA,4BACE,0CAAe,uBAAGC,KAAK,uCAAuCC,OAAO,UAAtD,oBACf,wCAAa,uBAAGD,KAAK,qCAAqCC,OAAO,UAApD,oBACb,uCAAY,uBAAGD,KAAK,oCAAoCC,OAAO,UAAnD,sBAGfH,EAASI,KAAI,gBAAGb,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,KAAnB,OACZ,kBAAC,EAAD,CACEF,SAAUA,EACVC,KAAMA,EACNC,KAAMA,SCpBIY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d701c084.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport './Section.css'\n\nconst Section = ({ headline, text, icon }) => (\n  <div className=\"section\">\n    <FontAwesomeIcon icon={icon} />\n    <h2>{headline}</h2>\n    <p>{text}</p>\n  </div>\n)\n\nexport default Section","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUniversity, faTrain, faHashtag, faToolbox } from '@fortawesome/free-solid-svg-icons'\n\nimport './App.css'\nimport Section from './Section';\n\nconst App = () => {\n\n  const [sections, setSections] = useState([\n    { headline: 'university', text: 'Im studying computer science as TU Berlin in 3rd semester. I think there\\'s not much more to say.', icon: faUniversity },\n    { headline: 'work', text: 'wip', icon: faTrain },\n    { headline: 'toolbox', text: 'Every developer does things repetitively. Setting up a tiny express server, configuring a local proxy, ...\\nI want to collect such things to make my life (and maybe yours) easyer. wip', icon: faToolbox }\n  ])\n  return (\n    <div className=\"app\" >\n      <div className=\"header\">\n        <h1>Hi. I'm Paul.</h1>\n      </div>\n      <div className=\"section\">\n        <FontAwesomeIcon icon={faHashtag} />\n        <h2>media</h2>\n        <ul>\n          <li>instagram: <a href=\"https://instagram.com/paulderfischer\" target=\"_blank\">@paulderfischer</a></li>\n          <li>twitter: <a href=\"https://twitter.com/paulderfischer\" target=\"_blank\">@paulderfischer</a></li>\n          <li>github: <a href=\"https://github.com/paulderfischer\" target=\"_blank\">@paulderfischer</a></li>\n        </ul>\n      </div>\n      {sections.map(({ headline, text, icon }) => (\n        <Section\n          headline={headline}\n          text={text}\n          icon={icon}\n        ></Section>\n      ))}\n    </div >\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}